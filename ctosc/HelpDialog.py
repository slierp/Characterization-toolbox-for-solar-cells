# -*- coding: utf-8 -*-
from PyQt5 import QtGui, QtWidgets

help_text = """
<html>
<head></head>
<body>
<h1>CTOSC</h1>

<ul>
<li><a href="#general">Introduction</a></li>
<li><a href="#rsheet">Sheet resistance mapping</li>
<li><a href="#ecv">ECV profiling</a></li>
<li><a href="#pl">Photoluminescence imaging</a></li>
</ul>

<p><h2><a name="general">Introduction</a></h2></p>
<p>
CTOSC stands for 'Characterization Toolbox for Solar Cells' and contains a few functionalities to process solar cell data.
</p>

<p><h2><a name="rsheet">Sheet resistance mapping</a></h2></p>
The program currently supports output files from the Sunlab Sherescan four-point probe (.txt files).
After loading the data files the sheet resistance map can be generated by selecting or double-clicking on any of the loaded items.
There are a number of options available via the 'Plot settings' button, including the type of color map to use and whether or not to use interpolation, to obtain a smoothened image.
</p>
<p>
A summary report can be generated with the 'make report' button.
An excel file will be generated with average, standard deviation, minimum and maximum sheet resistance for each data set.
</p>

<p><h2><a name="ecv">ECV profiling</a></h2></p>
The program currently supports output files from the WEP Wafer Profiler CVP21 (.csv files).
After loading the data files the dopant profile plots can be generated by selecting or double-clicking on any of the loaded items.
It is possible to select multiple data sets in order to combine them in the same plot image.
There are a number of options available via the 'Plot settings' button, such as the option to only show p-type or n-type doping.
</p>

<p><h2><a name="pl">Photoluminescence imaging</a></h2></p>
The purpose of this tool is to make an average image out of a series of images.
Such blending can be useful when comparing a series of photoluminescence measurements on groups of silicon solar cells.
</p>
<p>
The required image format is PNG (Portable Network Graphics). To convert images to the PNG format it is recommended
to use the batch conversion tool in the IrfanView program (on Windows). 
</p>


</body>
</html>
"""

class HelpDialog(QtWidgets.QDialog):
    # Generates help document browser    
    
    def __init__(self, parent):
        super(QtWidgets.QDialog, self).__init__(parent)
        
        self.parent = parent       
        
        self.setWindowTitle(self.tr("Help"))
        vbox = QtWidgets.QVBoxLayout()

        browser = QtWidgets.QTextBrowser()
        browser.insertHtml(help_text)
        browser.moveCursor(QtGui.QTextCursor.Start)

        vbox.addWidget(browser)

        ### Buttonbox for ok ###
        hbox = QtWidgets.QHBoxLayout()
        buttonbox = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok)
        buttonbox.accepted.connect(self.close)
        hbox.addStretch(1) 
        hbox.addWidget(buttonbox)
        hbox.addStretch(1)
        hbox.setContentsMargins(0,0,0,4)                
        vbox.addLayout(hbox)

        self.setLayout(vbox)
        self.setMinimumHeight(576)
        self.setMinimumWidth(1024)